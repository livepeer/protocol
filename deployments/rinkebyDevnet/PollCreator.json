{
  "address": "0x799124845E2b06800EFA2A6cea3CCAdd26c8d098",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "QUORUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_proposal",
          "type": "bytes"
        }
      ],
      "name": "createPoll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "POLL_CREATION_COST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "QUOTA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "POLL_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ILivepeerToken",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poll",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "proposal",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quorum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quota",
          "type": "uint256"
        }
      ],
      "name": "PollCreated",
      "type": "event"
    }
  ],
  "transactionHash": "0xda993fe9e35afda21eec8ff9803943b65a1141fa0497f614f59c21b13e999aaf",
  "receipt": {
    "to": null,
    "from": "0xB5Af4138f0f33be0D6414Eb25271B9C2Dc245fb5",
    "contractAddress": "0x799124845E2b06800EFA2A6cea3CCAdd26c8d098",
    "transactionIndex": 76,
    "gasUsed": "384827",
    "logsBloom": "0x
    "blockHash": "0x67341d9c3f12f6009f27ae154f2d4efc09be9b911ea90103213dc79203f27a49",
    "transactionHash": "0xda993fe9e35afda21eec8ff9803943b65a1141fa0497f614f59c21b13e999aaf",
    "logs": [],
    "blockNumber": 10020428,
    "cumulativeGasUsed": "15042755",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8573f2F5A3Bd960eeE3D998473e50C75cDbE6828"
  ],
  "solcInputHash": "ebcc0ae727048c8076751259a562c240",
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"QUORUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proposal\",\"type\":\"bytes\"}],\"name\":\"createPoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POLL_CREATION_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QUOTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"POLL_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ILivepeerToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"proposal\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"}],\"name\":\"PollCreated\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"createPoll(bytes)\":{\"details\":\"Create a poll by burning POLL_CREATION_COST LPT.     Reverts if this contract's LPT allowance for the sender < POLL_CREATION_COST.\",\"params\":{\"_proposal\":\"The IPFS multihash for the proposal.\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/polling/PollCreator.sol\":\"PollCreator\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polling/Poll.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\ncontract Poll {\\n    // The block at which the poll ends and votes can no longer be submitted.\\n    uint256 public endBlock;\\n\\n    // Vote is emitted when an account submits a vote with 'choiceID'.\\n    // This event can be indexed to tally all votes for each choiceID\\n    event Vote(address indexed voter, uint256 choiceID);\\n\\n    modifier isActive() {\\n        require(block.number <= endBlock, \\\"poll is over\\\");\\n        _;\\n    }\\n\\n    constructor(uint256 _endBlock) public {\\n        endBlock = _endBlock;\\n    }\\n\\n    /**\\n     * @dev Vote for the poll's proposal.\\n     *      Reverts if the poll period is over.\\n     * @param _choiceID the ID of the option to vote for\\n     */\\n    function vote(uint256 _choiceID) external isActive {\\n        emit Vote(msg.sender, _choiceID);\\n    }\\n\\n    /**\\n     * @dev Destroy the Poll contract after the poll has finished\\n     *      Reverts if the poll is still active\\n     */\\n    function destroy() external {\\n        require(block.number > endBlock, \\\"poll is active\\\");\\n        selfdestruct(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x745486b129454d017d03f2aafce029760215f95829c996c7f4e5564f27886ed8\"},\"contracts/polling/PollCreator.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\nimport \\\"./Poll.sol\\\";\\nimport \\\"../token/ILivepeerToken.sol\\\";\\n\\ncontract PollCreator {\\n    // 33.33%\\n    uint256 public constant QUORUM = 333300;\\n    // 50%\\n    uint256 public constant QUOTA = 500000;\\n    // 10 rounds\\n    uint256 public constant POLL_PERIOD = 10 * 5760;\\n    uint256 public constant POLL_CREATION_COST = 100 * 1 ether;\\n\\n    ILivepeerToken public token;\\n\\n    event PollCreated(address indexed poll, bytes proposal, uint256 endBlock, uint256 quorum, uint256 quota);\\n\\n    constructor(address _tokenAddr) public {\\n        token = ILivepeerToken(_tokenAddr);\\n    }\\n\\n    /**\\n     * @dev Create a poll by burning POLL_CREATION_COST LPT.\\n     *      Reverts if this contract's LPT allowance for the sender < POLL_CREATION_COST.\\n     * @param _proposal The IPFS multihash for the proposal.\\n     */\\n    function createPoll(bytes calldata _proposal) external {\\n        uint256 endBlock = block.number + POLL_PERIOD;\\n        Poll poll = new Poll(endBlock);\\n\\n        require(token.transferFrom(msg.sender, address(this), POLL_CREATION_COST), \\\"LivepeerToken transferFrom failed\\\");\\n\\n        token.burn(POLL_CREATION_COST);\\n\\n        emit PollCreated(address(poll), _proposal, endBlock, QUORUM, QUOTA);\\n    }\\n}\\n\",\"keccak256\":\"0x1d66e95b200576c288230b96524b92a5d48d970913f38efa26b0718358f6eb84\"},\"contracts/token/ILivepeerToken.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../zeppelin/Ownable.sol\\\";\\n\\ncontract ILivepeerToken is ERC20, Ownable {\\n    function mint(address _to, uint256 _amount) public returns (bool);\\n\\n    function burn(uint256 _amount) public;\\n}\\n\",\"keccak256\":\"0x6f0b90e50dcc0ebecd358fa6d8bb3ee24136f4157e139682c1db36f22322dba6\"},\"contracts/zeppelin/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x3689b5ecbe68f236d23bdc4e045274debc31e00bad129042d25185a4f7ee7675\"},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x4ccf2d7b51873db1ccfd54ca2adae5eac3b184f9699911ed4490438419f1c690\"},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in `IERC20.approve`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to `approve` that can be used as a mitigation for\\n     * problems described in `IERC20.approve`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n     /**\\n     * @dev Destoys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See `_burn` and `_approve`.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\\n    }\\n}\\n\",\"keccak256\":\"0x852793a3c2f86d336a683b30d688ec3dcfc57451af5a2bf5975cda3b7191a901\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x90e8c2521653bbb1768b05889c5760031e688d9cd361f167489b89215e201b95\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516105f93803806105f98339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610594806100656000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e80d9b6146100675780634d2942ab146100815780635359fbc0146100f3578063a502303b146100fb578063cb61e46e14610103578063fc0c546a1461010b575b600080fd5b61006f61012f565b60408051918252519081900360200190f35b6100f16004803603602081101561009757600080fd5b8101906020810181356401000000008111156100b257600080fd5b8201836020820111156100c457600080fd5b803590602001918460018302840111640100000000831117156100e657600080fd5b509092509050610136565b005b61006f610336565b61006f610343565b61006f61034a565b610113610350565b604080516001600160a01b039092168252519081900360200190f35b620515f481565b600061e1004301905060008160405161014e9061035f565b90815260405190819003602001906000f080158015610171573d6000803e3d6000fd5b5060008054604080516323b872dd60e01b815233600482015230602482015268056bc75e2d63100000604482015290519394506001600160a01b03909116926323b872dd92606480840193602093929083900390910190829087803b1580156101d957600080fd5b505af11580156101ed573d6000803e3d6000fd5b505050506040513d602081101561020357600080fd5b50516102405760405162461bcd60e51b815260040180806020018281038252602181526020018061053f6021913960400191505060405180910390fd5b6000805460408051630852cd8d60e31b815268056bc75e2d63100000600482015290516001600160a01b03909216926342966c689260248084019382900301818387803b15801561029057600080fd5b505af11580156102a4573d6000803e3d6000fd5b50505050806001600160a01b03167f8afbc4e1826cefcfc1e64fd5ff7d8484e700867fdbe36e9b6db047c010a6229e858585620515f46207a12060405180806020018581526020018481526020018381526020018281038252878782818152602001925080828437600083820152604051601f909101601f19169092018290039850909650505050505050a250505050565b68056bc75e2d6310000081565b6207a12081565b61e10081565b6000546001600160a01b031681565b6101d28061036d8339019056fe608060405234801561001057600080fd5b506040516101d23803806101d28339818101604052602081101561003357600080fd5b505160005561018b806100476000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630121b93f14610046578063083c63231461006557806383197ef01461007f575b600080fd5b6100636004803603602081101561005c57600080fd5b5035610087565b005b61006d610106565b60408051918252519081900360200190f35b61006361010c565b6000544311156100cd576040805162461bcd60e51b815260206004820152600c60248201526b3837b6361034b99037bb32b960a11b604482015290519081900360640190fd5b60408051828152905133917ff668ead05c744b9178e571d2edb452e72baf6529c8d72160e64e59b50d865bd0919081900360200190a250565b60005481565b6000544311610153576040805162461bcd60e51b815260206004820152600e60248201526d706f6c6c2069732061637469766560901b604482015290519081900360640190fd5b33fffea265627a7a72315820030d4ccd58e03ab2b59cf24b943e793300efd59c00f7528ae973ab9bcfda1de664736f6c634300050b00324c69766570656572546f6b656e207472616e7366657246726f6d206661696c6564a265627a7a723158204c5367d9ac947c9000a3d425f31e215066ca09633885e69ac31901675c2bb47e64736f6c634300050b0032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80632e80d9b6146100675780634d2942ab146100815780635359fbc0146100f3578063a502303b146100fb578063cb61e46e14610103578063fc0c546a1461010b575b600080fd5b61006f61012f565b60408051918252519081900360200190f35b6100f16004803603602081101561009757600080fd5b8101906020810181356401000000008111156100b257600080fd5b8201836020820111156100c457600080fd5b803590602001918460018302840111640100000000831117156100e657600080fd5b509092509050610136565b005b61006f610336565b61006f610343565b61006f61034a565b610113610350565b604080516001600160a01b039092168252519081900360200190f35b620515f481565b600061e1004301905060008160405161014e9061035f565b90815260405190819003602001906000f080158015610171573d6000803e3d6000fd5b5060008054604080516323b872dd60e01b815233600482015230602482015268056bc75e2d63100000604482015290519394506001600160a01b03909116926323b872dd92606480840193602093929083900390910190829087803b1580156101d957600080fd5b505af11580156101ed573d6000803e3d6000fd5b505050506040513d602081101561020357600080fd5b50516102405760405162461bcd60e51b815260040180806020018281038252602181526020018061053f6021913960400191505060405180910390fd5b6000805460408051630852cd8d60e31b815268056bc75e2d63100000600482015290516001600160a01b03909216926342966c689260248084019382900301818387803b15801561029057600080fd5b505af11580156102a4573d6000803e3d6000fd5b50505050806001600160a01b03167f8afbc4e1826cefcfc1e64fd5ff7d8484e700867fdbe36e9b6db047c010a6229e858585620515f46207a12060405180806020018581526020018481526020018381526020018281038252878782818152602001925080828437600083820152604051601f909101601f19169092018290039850909650505050505050a250505050565b68056bc75e2d6310000081565b6207a12081565b61e10081565b6000546001600160a01b031681565b6101d28061036d8339019056fe608060405234801561001057600080fd5b506040516101d23803806101d28339818101604052602081101561003357600080fd5b505160005561018b806100476000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630121b93f14610046578063083c63231461006557806383197ef01461007f575b600080fd5b6100636004803603602081101561005c57600080fd5b5035610087565b005b61006d610106565b60408051918252519081900360200190f35b61006361010c565b6000544311156100cd576040805162461bcd60e51b815260206004820152600c60248201526b3837b6361034b99037bb32b960a11b604482015290519081900360640190fd5b60408051828152905133917ff668ead05c744b9178e571d2edb452e72baf6529c8d72160e64e59b50d865bd0919081900360200190a250565b60005481565b6000544311610153576040805162461bcd60e51b815260206004820152600e60248201526d706f6c6c2069732061637469766560901b604482015290519081900360640190fd5b33fffea265627a7a72315820030d4ccd58e03ab2b59cf24b943e793300efd59c00f7528ae973ab9bcfda1de664736f6c634300050b00324c69766570656572546f6b656e207472616e7366657246726f6d206661696c6564a265627a7a723158204c5367d9ac947c9000a3d425f31e215066ca09633885e69ac31901675c2bb47e64736f6c634300050b0032",
  "devdoc": {
    "methods": {
      "createPoll(bytes)": {
        "details": "Create a poll by burning POLL_CREATION_COST LPT.     Reverts if this contract's LPT allowance for the sender < POLL_CREATION_COST.",
        "params": {
          "_proposal": "The IPFS multihash for the proposal."
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}