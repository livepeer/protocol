{
  "address": "0xD5611dC45706b8686578db6B1F88E0FE98938646",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        }
      ],
      "name": "ParameterUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "SetController",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setSnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "snapshot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "_leaf",
          "type": "bytes32"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x141d18d526ca4c213e087ff3cf23ea2ffb1114aafa5ceb28d59c04d407ff80aa",
  "receipt": {
    "to": null,
    "from": "0xC96f6B72843Af1988C98F78eAB3E47673af63eA1",
    "contractAddress": "0xD5611dC45706b8686578db6B1F88E0FE98938646",
    "transactionIndex": 1,
    "gasUsed": "371781",
    "logsBloom": "0x
    "blockHash": "0x82f119cee965e13835562760f5c7dfeef60f80a3b1469615169d205cb4364193",
    "transactionHash": "0x141d18d526ca4c213e087ff3cf23ea2ffb1114aafa5ceb28d59c04d407ff80aa",
    "logs": [],
    "blockNumber": 51058,
    "cumulativeGasUsed": "371781",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3Cfa0Be6195dbCA98A2849d1162561FD878589Dd"
  ],
  "numDeployments": 2,
  "solcInputHash": "38b657e341fe6dcb1b812a658e825f5e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"}],\"name\":\"ParameterUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"snapshot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_leaf\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setController(address)\":{\"params\":{\"_controller\":\"Controller contract address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setController(address)\":{\"notice\":\"Set controller. Only callable by current controller\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/snapshots/MerkleSnapshot.sol\":\"MerkleSnapshot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./zeppelin/Pausable.sol\\\";\\n\\nabstract contract IController is Pausable {\\n    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\\n\\n    function setContractInfo(\\n        bytes32 _id,\\n        address _contractAddress,\\n        bytes20 _gitCommitHash\\n    ) external virtual;\\n\\n    function updateController(bytes32 _id, address _controller) external virtual;\\n\\n    function getContract(bytes32 _id) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x34ea30a2b44d0cbec58fc1d703476ff0085b0fdadab0cd65c35c00b8867f7546\",\"license\":\"MIT\"},\"contracts/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IManager {\\n    event SetController(address controller);\\n    event ParameterUpdate(string param);\\n\\n    function setController(address _controller) external;\\n}\\n\",\"keccak256\":\"0xc179e4cecc593741514237d5194b4aaac6b829789629fa19ed04f572a8530481\",\"license\":\"MIT\"},\"contracts/Manager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IManager.sol\\\";\\nimport \\\"./IController.sol\\\";\\n\\ncontract Manager is IManager {\\n    // Controller that contract is registered with\\n    IController public controller;\\n\\n    // Check if sender is controller\\n    modifier onlyController() {\\n        _onlyController();\\n        _;\\n    }\\n\\n    // Check if sender is controller owner\\n    modifier onlyControllerOwner() {\\n        _onlyControllerOwner();\\n        _;\\n    }\\n\\n    // Check if controller is not paused\\n    modifier whenSystemNotPaused() {\\n        _whenSystemNotPaused();\\n        _;\\n    }\\n\\n    // Check if controller is paused\\n    modifier whenSystemPaused() {\\n        _whenSystemPaused();\\n        _;\\n    }\\n\\n    constructor(address _controller) {\\n        controller = IController(_controller);\\n    }\\n\\n    /**\\n     * @notice Set controller. Only callable by current controller\\n     * @param _controller Controller contract address\\n     */\\n    function setController(address _controller) external onlyController {\\n        controller = IController(_controller);\\n\\n        emit SetController(_controller);\\n    }\\n\\n    function _onlyController() private view {\\n        require(msg.sender == address(controller), \\\"caller must be Controller\\\");\\n    }\\n\\n    function _onlyControllerOwner() private view {\\n        require(msg.sender == controller.owner(), \\\"caller must be Controller owner\\\");\\n    }\\n\\n    function _whenSystemNotPaused() private view {\\n        require(!controller.paused(), \\\"system is paused\\\");\\n    }\\n\\n    function _whenSystemPaused() private view {\\n        require(controller.paused(), \\\"system is not paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc415e3f42da9f82ddd5953031f3f26aed824368fcc34d3b8a17015bfe80dc109\",\"license\":\"MIT\"},\"contracts/snapshots/MerkleSnapshot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../zeppelin/MerkleProof.sol\\\";\\nimport \\\"../Manager.sol\\\";\\n\\ncontract MerkleSnapshot is Manager {\\n    mapping(bytes32 => bytes32) public snapshot;\\n\\n    constructor(address _controller) Manager(_controller) {}\\n\\n    function setSnapshot(bytes32 _id, bytes32 _root) external onlyControllerOwner {\\n        snapshot[_id] = _root;\\n    }\\n\\n    function verify(\\n        bytes32 _id,\\n        bytes32[] calldata _proof,\\n        bytes32 _leaf\\n    ) external view returns (bool) {\\n        return MerkleProof.verify(_proof, snapshot[_id], _leaf);\\n    }\\n}\\n\",\"keccak256\":\"0xa42d7974badeef24d60fcc31aa840d8a0db2fa63ef8a1b4d9e0fdd5685df9804\",\"license\":\"MIT\"},\"contracts/zeppelin/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x88a59b65ddca0858efcf6ec39b7baf6bf1a02355e221fb85a2ce6e84ade2eba3\",\"license\":\"MIT\"},\"contracts/zeppelin/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x64f114689f2f161c4a4b8fc8442ab914436a33e6021bf17401eaeac73319a419\",\"license\":\"MIT\"},\"contracts/zeppelin/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n    event Pause();\\n    event Unpause();\\n\\n    bool public paused;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused);\\n        _;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() public onlyOwner whenNotPaused {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() public onlyOwner whenPaused {\\n        paused = false;\\n        emit Unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xe9635fcac46c22547a08f6977a8c75e7341411f1201f60bdd4c79c26e6c286ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516105e63803806105e683398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610553806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630a02831c1461005c5780631ac79c41146100845780635824adf4146100b257806392eefe9b146100c7578063f77c4791146100da575b600080fd5b61006f61006a3660046103c5565b610105565b60405190151581526020015b60405180910390f35b6100a461009236600461044a565b60016020526000908152604090205481565b60405190815260200161007b565b6100c56100c0366004610463565b61015b565b005b6100c56100d536600461049d565b610175565b6000546100ed906001600160a01b031681565b6040516001600160a01b03909116815260200161007b565b600061015284848080602002602001604051908101604052809392919081815260200183836020028082843760009201829052508a81526001602052604090205492508691506101d19050565b95945050505050565b610163610280565b60009182526001602052604090912055565b61017d61036b565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f4ff638452bbf33c012645d18ae6f05515ff5f2d1dfb0cece8cbf018c60903f709060200160405180910390a150565b600081815b85518110156102755760008682815181106101f3576101f36104c1565b60200260200101519050808311610235576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610262565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061026d816104d7565b9150506101d6565b509092149392505050565b60008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102cc57600080fd5b505afa1580156102e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103049190610500565b6001600160a01b0316336001600160a01b0316146103695760405162461bcd60e51b815260206004820152601f60248201527f63616c6c6572206d75737420626520436f6e74726f6c6c6572206f776e65720060448201526064015b60405180910390fd5b565b6000546001600160a01b031633146103695760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206d75737420626520436f6e74726f6c6c6572000000000000006044820152606401610360565b600080600080606085870312156103db57600080fd5b84359350602085013567ffffffffffffffff808211156103fa57600080fd5b818701915087601f83011261040e57600080fd5b81358181111561041d57600080fd5b8860208260051b850101111561043257600080fd5b95986020929092019750949560400135945092505050565b60006020828403121561045c57600080fd5b5035919050565b6000806040838503121561047657600080fd5b50508035926020909101359150565b6001600160a01b038116811461049a57600080fd5b50565b6000602082840312156104af57600080fd5b81356104ba81610485565b9392505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156104f957634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561051257600080fd5b81516104ba8161048556fea26469706673582212202da4c90c63220e0d052d25f4ca91345e2094ec9200198586debdb9e16f6a666a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80630a02831c1461005c5780631ac79c41146100845780635824adf4146100b257806392eefe9b146100c7578063f77c4791146100da575b600080fd5b61006f61006a3660046103c5565b610105565b60405190151581526020015b60405180910390f35b6100a461009236600461044a565b60016020526000908152604090205481565b60405190815260200161007b565b6100c56100c0366004610463565b61015b565b005b6100c56100d536600461049d565b610175565b6000546100ed906001600160a01b031681565b6040516001600160a01b03909116815260200161007b565b600061015284848080602002602001604051908101604052809392919081815260200183836020028082843760009201829052508a81526001602052604090205492508691506101d19050565b95945050505050565b610163610280565b60009182526001602052604090912055565b61017d61036b565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f4ff638452bbf33c012645d18ae6f05515ff5f2d1dfb0cece8cbf018c60903f709060200160405180910390a150565b600081815b85518110156102755760008682815181106101f3576101f36104c1565b60200260200101519050808311610235576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610262565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061026d816104d7565b9150506101d6565b509092149392505050565b60008054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102cc57600080fd5b505afa1580156102e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103049190610500565b6001600160a01b0316336001600160a01b0316146103695760405162461bcd60e51b815260206004820152601f60248201527f63616c6c6572206d75737420626520436f6e74726f6c6c6572206f776e65720060448201526064015b60405180910390fd5b565b6000546001600160a01b031633146103695760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206d75737420626520436f6e74726f6c6c6572000000000000006044820152606401610360565b600080600080606085870312156103db57600080fd5b84359350602085013567ffffffffffffffff808211156103fa57600080fd5b818701915087601f83011261040e57600080fd5b81358181111561041d57600080fd5b8860208260051b850101111561043257600080fd5b95986020929092019750949560400135945092505050565b60006020828403121561045c57600080fd5b5035919050565b6000806040838503121561047657600080fd5b50508035926020909101359150565b6001600160a01b038116811461049a57600080fd5b50565b6000602082840312156104af57600080fd5b81356104ba81610485565b9392505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156104f957634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561051257600080fd5b81516104ba8161048556fea26469706673582212202da4c90c63220e0d052d25f4ca91345e2094ec9200198586debdb9e16f6a666a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setController(address)": {
        "params": {
          "_controller": "Controller contract address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setController(address)": {
        "notice": "Set controller. Only callable by current controller"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2670,
        "contract": "contracts/snapshots/MerkleSnapshot.sol:MerkleSnapshot",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IController)2645"
      },
      {
        "astId": 10723,
        "contract": "contracts/snapshots/MerkleSnapshot.sol:MerkleSnapshot",
        "label": "snapshot",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IController)2645": {
        "encoding": "inplace",
        "label": "contract IController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}