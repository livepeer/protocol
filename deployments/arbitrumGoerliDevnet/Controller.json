{
  "address": "0x53Ea65f3E8B06d07DC1008276c5e4aa15126502B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes20",
          "name": "gitCommitHash",
          "type": "bytes20"
        }
      ],
      "name": "SetContractInfo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unpause",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "getContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "getContractInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes20",
          "name": "",
          "type": "bytes20"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_contractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes20",
          "name": "_gitCommitHash",
          "type": "bytes20"
        }
      ],
      "name": "setContractInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "updateController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x131ac01b01ea7fedcfceac3273c32c41ee66c4c3eed5559120aa4c0c32a05a3e",
  "receipt": {
    "to": null,
    "from": "0xa7BeA8108b77905113c0b22c16806672c38d040b",
    "contractAddress": "0x53Ea65f3E8B06d07DC1008276c5e4aa15126502B",
    "transactionIndex": 1,
    "gasUsed": "366428",
    "logsBloom": "0x
    "blockHash": "0x3e34a9908ed06012e18314f346af497cd890776144bfad3739f4098b455b85e1",
    "transactionHash": "0x131ac01b01ea7fedcfceac3273c32c41ee66c4c3eed5559120aa4c0c32a05a3e",
    "logs": [],
    "blockNumber": 35154012,
    "cumulativeGasUsed": "366428",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8d767bf23267fd0b4e34029f9fbd8e3a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes20\",\"name\":\"gitCommitHash\",\"type\":\"bytes20\"}],\"name\":\"SetContractInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getContractInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes20\",\"name\":\"_gitCommitHash\",\"type\":\"bytes20\"}],\"name\":\"setContractInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"updateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getContract(bytes32)\":{\"params\":{\"_id\":\"Contract id\"}},\"getContractInfo(bytes32)\":{\"params\":{\"_id\":\"Contract id (keccak256 hash of contract name)\"}},\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"setContractInfo(bytes32,address,bytes20)\":{\"params\":{\"_contractAddress\":\"Contract address\",\"_id\":\"Contract id (keccak256 hash of contract name)\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"},\"updateController(bytes32,address)\":{\"params\":{\"_controller\":\"Controller address\",\"_id\":\"Contract id (keccak256 hash of contract name)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getContract(bytes32)\":{\"notice\":\"Get contract address for an id\"},\"getContractInfo(bytes32)\":{\"notice\":\"Return contract info for a given contract id\"},\"setContractInfo(bytes32,address,bytes20)\":{\"notice\":\"Register contract id and mapped address\"},\"updateController(bytes32,address)\":{\"notice\":\"Update contract's controller\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IManager.sol\\\";\\n\\nimport \\\"./zeppelin/Pausable.sol\\\";\\n\\ncontract Controller is Pausable, IController {\\n    // Track information about a registered contract\\n    struct ContractInfo {\\n        address contractAddress; // Address of contract\\n        bytes20 gitCommitHash; // SHA1 hash of head Git commit during registration of this contract\\n    }\\n\\n    // Track contract ids and contract info\\n    mapping(bytes32 => ContractInfo) private registry;\\n\\n    constructor() {\\n        // Start system as paused\\n        paused = true;\\n    }\\n\\n    /**\\n     * @notice Register contract id and mapped address\\n     * @param _id Contract id (keccak256 hash of contract name)\\n     * @param _contractAddress Contract address\\n     */\\n    function setContractInfo(\\n        bytes32 _id,\\n        address _contractAddress,\\n        bytes20 _gitCommitHash\\n    ) external override onlyOwner {\\n        registry[_id].contractAddress = _contractAddress;\\n        registry[_id].gitCommitHash = _gitCommitHash;\\n\\n        emit SetContractInfo(_id, _contractAddress, _gitCommitHash);\\n    }\\n\\n    /**\\n     * @notice Update contract's controller\\n     * @param _id Contract id (keccak256 hash of contract name)\\n     * @param _controller Controller address\\n     */\\n    function updateController(bytes32 _id, address _controller) external override onlyOwner {\\n        return IManager(registry[_id].contractAddress).setController(_controller);\\n    }\\n\\n    /**\\n     * @notice Return contract info for a given contract id\\n     * @param _id Contract id (keccak256 hash of contract name)\\n     */\\n    function getContractInfo(bytes32 _id) public view returns (address, bytes20) {\\n        return (registry[_id].contractAddress, registry[_id].gitCommitHash);\\n    }\\n\\n    /**\\n     * @notice Get contract address for an id\\n     * @param _id Contract id\\n     */\\n    function getContract(bytes32 _id) public view override returns (address) {\\n        return registry[_id].contractAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xff642fe4ef49ba96c27b0a5801ed601726573b5d8d439972498282d6acd3a8fb\",\"license\":\"MIT\"},\"contracts/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./zeppelin/Pausable.sol\\\";\\n\\nabstract contract IController is Pausable {\\n    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\\n\\n    function setContractInfo(\\n        bytes32 _id,\\n        address _contractAddress,\\n        bytes20 _gitCommitHash\\n    ) external virtual;\\n\\n    function updateController(bytes32 _id, address _controller) external virtual;\\n\\n    function getContract(bytes32 _id) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x34ea30a2b44d0cbec58fc1d703476ff0085b0fdadab0cd65c35c00b8867f7546\",\"license\":\"MIT\"},\"contracts/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IManager {\\n    event SetController(address controller);\\n    event ParameterUpdate(string param);\\n\\n    function setController(address _controller) external;\\n}\\n\",\"keccak256\":\"0xc179e4cecc593741514237d5194b4aaac6b829789629fa19ed04f572a8530481\",\"license\":\"MIT\"},\"contracts/zeppelin/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x64f114689f2f161c4a4b8fc8442ab914436a33e6021bf17401eaeac73319a419\",\"license\":\"MIT\"},\"contracts/zeppelin/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n    event Pause();\\n    event Unpause();\\n\\n    bool public paused;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused);\\n        _;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() public onlyOwner whenNotPaused {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() public onlyOwner whenPaused {\\n        paused = false;\\n        emit Unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xe9635fcac46c22547a08f6977a8c75e7341411f1201f60bdd4c79c26e6c286ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805460ff60a01b1933166001600160a81b031990911617600160a01b179055610542806100416000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b14610134578063d737c2b01461015f578063e16c7d9814610172578063eb5dd94f1461019b578063f2fde38b146101ae57600080fd5b80633f4ba83a146100985780635c975abb146100a2578063613e2de2146100cb5780638456cb591461012c575b600080fd5b6100a06101c1565b005b6000546100b690600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b6101046100d936600461043c565b600090815260016020819052604090912080549101546001600160a01b039091169160609190911b90565b604080516001600160a01b0390931683526001600160601b03199091166020830152016100c2565b6100a0610224565b600054610147906001600160a01b031681565b6040516001600160a01b0390911681526020016100c2565b6100a061016d366004610471565b61028e565b61014761018036600461043c565b6000908152600160205260409020546001600160a01b031690565b6100a06101a93660046104be565b610330565b6100a06101bc3660046104ea565b6103b7565b6000546001600160a01b031633146101d857600080fd5b600054600160a01b900460ff166101ee57600080fd5b6000805460ff60a01b191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b6000546001600160a01b0316331461023b57600080fd5b600054600160a01b900460ff161561025257600080fd5b6000805460ff60a01b1916600160a01b1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b6000546001600160a01b031633146102a557600080fd5b60008381526001602081815260409283902080546001600160a01b0387166001600160a01b031991821681178355919093018054606087811c919095161790558351878152918201526001600160601b03198416928101929092527ff9a6cf519167d81bc5cb3d26c60c0c9a19704aa908c148e82a861b570f4cd2d7910160405180910390a1505050565b6000546001600160a01b0316331461034757600080fd5b600082815260016020526040908190205490516392eefe9b60e01b81526001600160a01b038381166004830152909116906392eefe9b90602401600060405180830381600087803b15801561039b57600080fd5b505af11580156103af573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103ce57600080fd5b6001600160a01b0381166103e157600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561044e57600080fd5b5035919050565b80356001600160a01b038116811461046c57600080fd5b919050565b60008060006060848603121561048657600080fd5b8335925061049660208501610455565b915060408401356001600160601b0319811681146104b357600080fd5b809150509250925092565b600080604083850312156104d157600080fd5b823591506104e160208401610455565b90509250929050565b6000602082840312156104fc57600080fd5b61050582610455565b939250505056fea2646970667358221220d81c0edc5dfe2d859317e381899ad1959fd8187078b31b7fe160d782d9fced9e64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b14610134578063d737c2b01461015f578063e16c7d9814610172578063eb5dd94f1461019b578063f2fde38b146101ae57600080fd5b80633f4ba83a146100985780635c975abb146100a2578063613e2de2146100cb5780638456cb591461012c575b600080fd5b6100a06101c1565b005b6000546100b690600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b6101046100d936600461043c565b600090815260016020819052604090912080549101546001600160a01b039091169160609190911b90565b604080516001600160a01b0390931683526001600160601b03199091166020830152016100c2565b6100a0610224565b600054610147906001600160a01b031681565b6040516001600160a01b0390911681526020016100c2565b6100a061016d366004610471565b61028e565b61014761018036600461043c565b6000908152600160205260409020546001600160a01b031690565b6100a06101a93660046104be565b610330565b6100a06101bc3660046104ea565b6103b7565b6000546001600160a01b031633146101d857600080fd5b600054600160a01b900460ff166101ee57600080fd5b6000805460ff60a01b191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b6000546001600160a01b0316331461023b57600080fd5b600054600160a01b900460ff161561025257600080fd5b6000805460ff60a01b1916600160a01b1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b6000546001600160a01b031633146102a557600080fd5b60008381526001602081815260409283902080546001600160a01b0387166001600160a01b031991821681178355919093018054606087811c919095161790558351878152918201526001600160601b03198416928101929092527ff9a6cf519167d81bc5cb3d26c60c0c9a19704aa908c148e82a861b570f4cd2d7910160405180910390a1505050565b6000546001600160a01b0316331461034757600080fd5b600082815260016020526040908190205490516392eefe9b60e01b81526001600160a01b038381166004830152909116906392eefe9b90602401600060405180830381600087803b15801561039b57600080fd5b505af11580156103af573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103ce57600080fd5b6001600160a01b0381166103e157600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561044e57600080fd5b5035919050565b80356001600160a01b038116811461046c57600080fd5b919050565b60008060006060848603121561048657600080fd5b8335925061049660208501610455565b915060408401356001600160601b0319811681146104b357600080fd5b809150509250925092565b600080604083850312156104d157600080fd5b823591506104e160208401610455565b90509250929050565b6000602082840312156104fc57600080fd5b61050582610455565b939250505056fea2646970667358221220d81c0edc5dfe2d859317e381899ad1959fd8187078b31b7fe160d782d9fced9e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getContract(bytes32)": {
        "params": {
          "_id": "Contract id"
        }
      },
      "getContractInfo(bytes32)": {
        "params": {
          "_id": "Contract id (keccak256 hash of contract name)"
        }
      },
      "pause()": {
        "details": "called by the owner to pause, triggers stopped state"
      },
      "setContractInfo(bytes32,address,bytes20)": {
        "params": {
          "_contractAddress": "Contract address",
          "_id": "Contract id (keccak256 hash of contract name)"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      },
      "unpause()": {
        "details": "called by the owner to unpause, returns to normal state"
      },
      "updateController(bytes32,address)": {
        "params": {
          "_controller": "Controller address",
          "_id": "Contract id (keccak256 hash of contract name)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getContract(bytes32)": {
        "notice": "Get contract address for an id"
      },
      "getContractInfo(bytes32)": {
        "notice": "Return contract info for a given contract id"
      },
      "setContractInfo(bytes32,address,bytes20)": {
        "notice": "Register contract id and mapped address"
      },
      "updateController(bytes32,address)": {
        "notice": "Update contract's controller"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 46046,
        "contract": "contracts/Controller.sol:Controller",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 46114,
        "contract": "contracts/Controller.sol:Controller",
        "label": "paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18629,
        "contract": "contracts/Controller.sol:Controller",
        "label": "registry",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(ContractInfo)18624_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes20": {
        "encoding": "inplace",
        "label": "bytes20",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(ContractInfo)18624_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Controller.ContractInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ContractInfo)18624_storage"
      },
      "t_struct(ContractInfo)18624_storage": {
        "encoding": "inplace",
        "label": "struct Controller.ContractInfo",
        "members": [
          {
            "astId": 18621,
            "contract": "contracts/Controller.sol:Controller",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18623,
            "contract": "contracts/Controller.sol:Controller",
            "label": "gitCommitHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes20"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}